nameLength = length(names)
for(x in c(1:nameLength)){
dataframe$Name[dataframe$Object == x] = names[x]
if(is.na(time0s) != TRUE){
dataframe$TimeNo = as.numeric(difftime(dataframe$DateTime, strptime(time0s[x], format = "%Y-%m-%d %H:%M:%S"), units = "mins"))
}
}
}
#ensure columns are properly formatted
dataframe$DateTime = strptime(paste(dataframe$Date, dataframe$Time), format = "%Y-%m-%d %H:%M:%S")
dataframe$Area = as.numeric(as.character(dataframe$Area))
dataframe$CO2abs = as.numeric(as.character(dataframe$CO2abs))
dataframe$dCO2ZP = as.numeric(as.character(dataframe$dCO2ZP))
dataframe$dCO2MP = as.numeric(as.character(dataframe$dCO2MP))
dataframe$H2Oabs = as.numeric(as.character(dataframe$H2Oabs))
dataframe$dH2OZP = as.numeric(as.character(dataframe$dH2OZP))
dataframe$dH2OMP = as.numeric(as.character(dataframe$dH2OMP))
dataframe$Flow = as.numeric(as.character(dataframe$Flow))
dataframe$Pamb = as.numeric(as.character(dataframe$Pamb))
dataframe$Tcuv = as.numeric(as.character(dataframe$Tcuv))
dataframe$Tleaf = as.numeric(as.character(dataframe$Tleaf))
dataframe$Tamb = as.numeric(as.character(dataframe$Tamb))
dataframe$Ttop = as.numeric(as.character(dataframe$Ttop))
dataframe$PARtop = as.numeric(as.character(dataframe$PARtop))
dataframe$PARbot = as.numeric(as.character(dataframe$PARbot))
dataframe$PARamb = as.numeric(as.character(dataframe$PARamb))
dataframe$rh = as.numeric(as.character(dataframe$rh))
dataframe$E = as.numeric(as.character(dataframe$E))
dataframe$VPD = as.numeric(as.character(dataframe$VPD))
dataframe$GH2O = as.numeric(as.character(dataframe$GH2O))
dataframe$A = as.numeric(as.character(dataframe$A))
dataframe$ci = as.numeric(as.character(dataframe$ci))
dataframe$ca = as.numeric(as.character(dataframe$ca))
dataframe$wa = as.numeric(as.character(dataframe$wa))
dataframe
}
test = import.single.GFS3000("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/q1124 10.11.19.csv", names="hi", "2021-3-18 09:00:00")
import.single.GFS3000 <- function(file, names=NA, time0s=NA){
#read in .csv file
dataframe = read.csv(file, fileEncoding = "latin1", sep = ";")
#ensure columns are properly formatted
dataframe$DateTime = strptime(paste(dataframe$Date, dataframe$Time), format = "%Y-%m-%d %H:%M:%S")
dataframe$Area = as.numeric(as.character(dataframe$Area))
dataframe$CO2abs = as.numeric(as.character(dataframe$CO2abs))
dataframe$dCO2ZP = as.numeric(as.character(dataframe$dCO2ZP))
dataframe$dCO2MP = as.numeric(as.character(dataframe$dCO2MP))
dataframe$H2Oabs = as.numeric(as.character(dataframe$H2Oabs))
dataframe$dH2OZP = as.numeric(as.character(dataframe$dH2OZP))
dataframe$dH2OMP = as.numeric(as.character(dataframe$dH2OMP))
dataframe$Flow = as.numeric(as.character(dataframe$Flow))
dataframe$Pamb = as.numeric(as.character(dataframe$Pamb))
dataframe$Tcuv = as.numeric(as.character(dataframe$Tcuv))
dataframe$Tleaf = as.numeric(as.character(dataframe$Tleaf))
dataframe$Tamb = as.numeric(as.character(dataframe$Tamb))
dataframe$Ttop = as.numeric(as.character(dataframe$Ttop))
dataframe$PARtop = as.numeric(as.character(dataframe$PARtop))
dataframe$PARbot = as.numeric(as.character(dataframe$PARbot))
dataframe$PARamb = as.numeric(as.character(dataframe$PARamb))
dataframe$rh = as.numeric(as.character(dataframe$rh))
dataframe$E = as.numeric(as.character(dataframe$E))
dataframe$VPD = as.numeric(as.character(dataframe$VPD))
dataframe$GH2O = as.numeric(as.character(dataframe$GH2O))
dataframe$A = as.numeric(as.character(dataframe$A))
dataframe$ci = as.numeric(as.character(dataframe$ci))
dataframe$ca = as.numeric(as.character(dataframe$ca))
dataframe$wa = as.numeric(as.character(dataframe$wa))
if(is.na(time0s) != TRUE){
dataframe$TimeNo = NA
}
#add name column if name variable is not NA and time0 as well
if(is.na(names) != TRUE){
dataframe$Name = NA
dataframe$Object = as.numeric(as.character(dataframe$Object))
nameLength = length(names)
for(x in c(1:nameLength)){
dataframe$Name[dataframe$Object == x] = names[x]
if(is.na(time0s) != TRUE){
dataframe$TimeNo = as.numeric(difftime(dataframe$DateTime, strptime(time0s[x], format = "%Y-%m-%d %H:%M:%S"), units = "mins"))
}
}
}
dataframe
}
test = import.single.GFS3000("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/q1124 10.11.19.csv", names=c("hi","bye"))
test = import.single.GFS3000("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/q1124 10.11.19.csv", names="hi", "2021-3-18 09:00:00")
getwd()
devtools::document()
devtools::document()
devtools::install()
library(GFS3000AnalysR)
import.single.GFS3000("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/q1124 10.11.19.csv", names="Col-0", time0s = "2019-11-19 12:00:00")
test =import.single.GFS3000("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/q1124 10.11.19.csv", names="Col-0", time0s = "2019-11-19 12:00:00")
View(test)
ggplot(test, aes(TimeNo, GH2O)) + geom_point()
library(ggplot2)
ggplot(test, aes(TimeNo, GH2O)) + geom_point()
test =import.single.GFS3000("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/q1124 10.11.19.csv", names="Col-0", time0s = "2019-11-10 12:00:00")
ggplot(test, aes(TimeNo, GH2O)) + geom_point()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::install()
devtools::document()
devtools::install()
devtools::install()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
library(GFS3000AnalysR)
import.multiple.GFS3000(files = c("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/a1 18.11.19.csv","~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/a3 19.11.19.csv"),c("a1","a3"),c("2019-11-18 10:00:00","2019-11-19 10:00:00"))
test = import.multiple.GFS3000(files = c("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/a1 18.11.19.csv","~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/a3 19.11.19.csv"),c("a1","a3"),c("2019-11-18 10:00:00","2019-11-19 10:00:00"))
View(test)
library(ggplot2)
ggplot(test, aes(TimeNo, GH2O, fill = Name)) +
geom_point(shape=21)
ggplot(test, aes(TimeNo, GH2O, fill = Name)) +
geom_point(shape=21) +
geom_line()
setwd("~/OneDrive - University of Bristol/PhD/Coding/R Packages/GFS3000AnalysR/")
devtools::document()
devtools::install()
library(GFS3000AnalysR)
test = import.multiple.GFS3000(files = c("~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/a1 18.11.19.csv","~/OneDrive - University of Bristol/PhD/PHD IDEAS/ABA receptors/Experiments/Dark induced closure/ABA mutant dark closure gas analyser/aba mutants/a3 19.11.19.csv"),c("a1","a3"),c("2019-11-18 10:00:00","2019-11-19 10:00:00"))
View(test)
dataframe = test
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe
}
View(dataframe)
test$Object = as.numeric(as.character(test$Object))
View(test)
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
View(test2)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
#Transpiration (E)
dataframe$E = 0.1 * ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe
}
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
test2 = changeLeafArea(test, leafArea = 2, objectNo = 1)
test2 = changeLeafArea(test, leafArea = 20, objectNo = 1)
test2 = changeLeafArea(test, leafArea = 2, objectNo = 1)
test2 = changeLeafArea(test, leafArea = 2.5, objectNo = 1)
test2 = changeLeafArea(test, leafArea = 1.5, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = ((flowmmolm2s1 * (dC2OMP_perc - dC2OZP_perc))/(m2Area * (1- (ca_perc))))
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.5, objectNo = 1)
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
View(test)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = ((flowmmolm2s1 * (dC2OMP_perc - dC2OZP_perc))/(m2Area * (1- (ca_perc)))) * -1000
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = ((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area * (1- (ca_perc)))) * 1000
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = ((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (E * ca_perc)
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = ((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#Intercellular CO2 concentration (ci)
GCO2 = dataframe$GH2O/1.56
dataframe$ci = (((GCO2 - (dataframe$E/2)) * ca) - dataframe$A) / (GCO2 + (dataframe$E/2))
#return
dataframe
}
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#Intercellular CO2 concentration (ci)
GCO2 = dataframe$GH2O/1.56
dataframe$ci = (((GCO2 - (dataframe$E/2)) * ca) - dataframe$A) / (GCO2 + (dataframe$E/2))
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#Intercellular CO2 concentration (ci)
GCO2 = dataframe$GH2O/1.56
dataframe$ci = (((GCO2 - (dataframe$E/2)) * ca_perc) - dataframe$A) / (GCO2 + (dataframe$E/2))
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#Intercellular CO2 concentration (ci)
GCO2 = dataframe$GH2O/1.56
dataframe$ci = (((GCO2 - (dataframe$E/2)) * ca_perc) - (dataframe$A/1000)) / (GCO2 + (dataframe$E/2))
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#Intercellular CO2 concentration (ci)
GCO2 = dataframe$GH2O/1.56
dataframe$ci = ((((GCO2 - (dataframe$E/2)) * ca_perc) - (dataframe$A/1000)) / (GCO2 + (dataframe$E/2))) * 1000000
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
changeLeafArea <- function(dataframe, leafArea, objectNo) {
#The Von C and Farqhuar 198~ paper and the GFS3000 manual are helpful in understanding these equations
#Changing leaf area
dataframe$Area[dataframe$Object == objectNo] = leafArea
#Converting values
m2Area = dataframe$Area/10000
flowmmolm2s1 = dataframe$Flow/1000
dH2OMP_perc = dataframe$dH2OMP/1000000
dH2OZP_perc = dataframe$dH2OZP/1000000
wa_perc = dataframe$wa/1000000
VPD = dataframe$VPD/1000
dC2OMP_perc = dataframe$dCO2MP/1000000
dC2OZP_perc = dataframe$dCO2ZP/1000000
ca_perc = dataframe$ca/1000000
#Transpiration (E)
dataframe$E = ((flowmmolm2s1 * (dH2OMP_perc - dH2OZP_perc))/(m2Area * (1- (wa_perc))))
dataframe$GH2O = dataframe$E/VPD
#Photosynthetic assimilation (A)
dataframe$A = (((flowmmolm2s1 * (dC2OZP_perc - dC2OMP_perc))/(m2Area)) - (dataframe$E * ca_perc)) * 1000
#Intercellular CO2 concentration (ci)
GCO2 = dataframe$GH2O/1.56
dataframe$ci = ((((GCO2 - (dataframe$E/2)) * ca_perc) - (dataframe$A/1000)) / (GCO2 + (dataframe$E/2))) * 1000000
#return
dataframe
}
test2 = changeLeafArea(test, leafArea = 1.74, objectNo = 1)
getwd()
devtools::document()
devtools::document()
devtools::install()
library(ggplot2)
library(GFS3000AnalysR)
changeLeafArea()
devtools::document()
devtools::install()
